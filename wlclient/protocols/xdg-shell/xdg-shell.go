// Code generated by wayland-scanner; DO NOT EDIT.

// Package xdgShell contains generated definitions of the xdg_shell Wayland protocol.
package xdgShell

import (
	"honnef.co/go/wayland/wlclient"
	"honnef.co/go/wayland/wlclient/protocols/wayland"
	"honnef.co/go/wayland/wlproto"
	"honnef.co/go/wayland/wlshared"
	"reflect"
)

var _ wlshared.Fixed

var interfaceNames = map[string]string{
	"xdg_wm_base":    "WmBase",
	"xdg_positioner": "Positioner",
	"xdg_surface":    "Surface",
	"xdg_toplevel":   "Toplevel",
	"xdg_popup":      "Popup",
}

var Interfaces = map[string]*wlproto.Interface{
	"xdg_wm_base":    wmBaseInterface,
	"xdg_positioner": positionerInterface,
	"xdg_surface":    surfaceInterface,
	"xdg_toplevel":   toplevelInterface,
	"xdg_popup":      popupInterface,
}

var Requests = map[string]*wlproto.Request{
	"xdg_wm_base_destroy":                      &wmBaseInterface.Requests[0],
	"xdg_wm_base_create_positioner":            &wmBaseInterface.Requests[1],
	"xdg_wm_base_get_xdg_surface":              &wmBaseInterface.Requests[2],
	"xdg_wm_base_pong":                         &wmBaseInterface.Requests[3],
	"xdg_positioner_destroy":                   &positionerInterface.Requests[0],
	"xdg_positioner_set_size":                  &positionerInterface.Requests[1],
	"xdg_positioner_set_anchor_rect":           &positionerInterface.Requests[2],
	"xdg_positioner_set_anchor":                &positionerInterface.Requests[3],
	"xdg_positioner_set_gravity":               &positionerInterface.Requests[4],
	"xdg_positioner_set_constraint_adjustment": &positionerInterface.Requests[5],
	"xdg_positioner_set_offset":                &positionerInterface.Requests[6],
	"xdg_positioner_set_reactive":              &positionerInterface.Requests[7],
	"xdg_positioner_set_parent_size":           &positionerInterface.Requests[8],
	"xdg_positioner_set_parent_configure":      &positionerInterface.Requests[9],
	"xdg_surface_destroy":                      &surfaceInterface.Requests[0],
	"xdg_surface_get_toplevel":                 &surfaceInterface.Requests[1],
	"xdg_surface_get_popup":                    &surfaceInterface.Requests[2],
	"xdg_surface_set_window_geometry":          &surfaceInterface.Requests[3],
	"xdg_surface_ack_configure":                &surfaceInterface.Requests[4],
	"xdg_toplevel_destroy":                     &toplevelInterface.Requests[0],
	"xdg_toplevel_set_parent":                  &toplevelInterface.Requests[1],
	"xdg_toplevel_set_title":                   &toplevelInterface.Requests[2],
	"xdg_toplevel_set_app_id":                  &toplevelInterface.Requests[3],
	"xdg_toplevel_show_window_menu":            &toplevelInterface.Requests[4],
	"xdg_toplevel_move":                        &toplevelInterface.Requests[5],
	"xdg_toplevel_resize":                      &toplevelInterface.Requests[6],
	"xdg_toplevel_set_max_size":                &toplevelInterface.Requests[7],
	"xdg_toplevel_set_min_size":                &toplevelInterface.Requests[8],
	"xdg_toplevel_set_maximized":               &toplevelInterface.Requests[9],
	"xdg_toplevel_unset_maximized":             &toplevelInterface.Requests[10],
	"xdg_toplevel_set_fullscreen":              &toplevelInterface.Requests[11],
	"xdg_toplevel_unset_fullscreen":            &toplevelInterface.Requests[12],
	"xdg_toplevel_set_minimized":               &toplevelInterface.Requests[13],
	"xdg_popup_destroy":                        &popupInterface.Requests[0],
	"xdg_popup_grab":                           &popupInterface.Requests[1],
	"xdg_popup_reposition":                     &popupInterface.Requests[2],
}

var Events = map[string]*wlproto.Event{
	"xdg_wm_base_ping":       &wmBaseInterface.Events[0],
	"xdg_surface_configure":  &surfaceInterface.Events[0],
	"xdg_toplevel_configure": &toplevelInterface.Events[0],
	"xdg_toplevel_close":     &toplevelInterface.Events[1],
	"xdg_popup_configure":    &popupInterface.Events[0],
	"xdg_popup_popup_done":   &popupInterface.Events[1],
	"xdg_popup_repositioned": &popupInterface.Events[2],
}

type WmBaseError uint32

const (
	// given wl_surface has another role
	WmBaseErrorRole WmBaseError = 0
	// xdg_wm_base was destroyed before children
	WmBaseErrorDefunctSurfaces WmBaseError = 1
	// the client tried to map or destroy a non-topmost popup
	WmBaseErrorNotTheTopmostPopup WmBaseError = 2
	// the client specified an invalid popup parent surface
	WmBaseErrorInvalidPopupParent WmBaseError = 3
	// the client provided an invalid surface state
	WmBaseErrorInvalidSurfaceState WmBaseError = 4
	// the client provided an invalid positioner
	WmBaseErrorInvalidPositioner WmBaseError = 5
)

var wmBaseInterface = &wlproto.Interface{
	Name:    "xdg_wm_base",
	Version: 3,
	Requests: []wlproto.Request{
		{
			Name:  "destroy",
			Type:  "destructor",
			Since: 1,
			Args:  []wlproto.Arg{},
		},
		{
			Name:  "create_positioner",
			Type:  "",
			Since: 1,
			Args: []wlproto.Arg{
				{Type: wlproto.ArgTypeNewID, Aux: reflect.TypeOf((*Positioner)(nil))},
			},
		},
		{
			Name:  "get_xdg_surface",
			Type:  "",
			Since: 1,
			Args: []wlproto.Arg{
				{Type: wlproto.ArgTypeNewID, Aux: reflect.TypeOf((*Surface)(nil))},
				{Type: wlproto.ArgTypeObject, Aux: reflect.TypeOf((*wayland.Surface)(nil))},
			},
		},
		{
			Name:  "pong",
			Type:  "",
			Since: 1,
			Args: []wlproto.Arg{
				{Type: wlproto.ArgTypeUint},
			},
		},
	},
	Events: []wlproto.Event{
		{
			Name:  "ping",
			Since: 1,
			Args: []wlproto.Arg{
				{Type: wlproto.ArgTypeUint},
			},
		},
	},
}

// The xdg_wm_base interface is exposed as a global object enabling clients
// to turn their wl_surfaces into windows in a desktop environment. It
// defines the basic functionality needed for clients and the compositor to
// create windows that can be dragged, resized, maximized, etc, as well as
// creating transient windows such as popup menus.
type WmBase struct{ wlclient.Proxy }

func (*WmBase) Interface() *wlproto.Interface { return wmBaseInterface }

func (obj *WmBase) WithQueue(queue *wlclient.EventQueue) *WmBase {
	wobj := &WmBase{}
	obj.Conn().NewWrapper(obj, wobj, queue)
	return wobj
}

type WmBaseEvents struct {
	Ping func(obj *WmBase, serial uint32)
}

func (obj *WmBase) AddListener(listeners WmBaseEvents) {
	obj.Proxy.SetListeners(listeners.Ping)
}

// Destroy this xdg_wm_base object.
//
// Destroying a bound xdg_wm_base object while there are surfaces
// still alive created by this xdg_wm_base object instance is illegal
// and will result in a protocol error.
func (obj *WmBase) Destroy() {
	obj.Conn().SendDestructor(obj, 0)
}

// Create a positioner object. A positioner object is used to position
// surfaces relative to some parent surface. See the interface description
// and xdg_surface.get_popup for details.
func (obj *WmBase) CreatePositioner() *Positioner {
	_ret := &Positioner{}
	obj.Conn().NewProxy(0, _ret, obj.Queue())
	obj.Conn().SendRequest(obj, 1, _ret)
	return _ret
}

// This creates an xdg_surface for the given surface. While xdg_surface
// itself is not a role, the corresponding surface may only be assigned
// a role extending xdg_surface, such as xdg_toplevel or xdg_popup.
//
// This creates an xdg_surface for the given surface. An xdg_surface is
// used as basis to define a role to a given surface, such as xdg_toplevel
// or xdg_popup. It also manages functionality shared between xdg_surface
// based surface roles.
//
// See the documentation of xdg_surface for more details about what an
// xdg_surface is and how it is used.
func (obj *WmBase) GetXdgSurface(surface *wayland.Surface) *Surface {
	_ret := &Surface{}
	obj.Conn().NewProxy(0, _ret, obj.Queue())
	obj.Conn().SendRequest(obj, 2, _ret, surface)
	return _ret
}

// A client must respond to a ping event with a pong request or
// the client may be deemed unresponsive. See xdg_wm_base.ping.
func (obj *WmBase) Pong(serial uint32) {
	obj.Conn().SendRequest(obj, 3, serial)
}

type PositionerError uint32

const (
	// invalid input provided
	PositionerErrorInvalidInput PositionerError = 0
)

type PositionerAnchor uint32

const (
	PositionerAnchorNone        PositionerAnchor = 0
	PositionerAnchorTop         PositionerAnchor = 1
	PositionerAnchorBottom      PositionerAnchor = 2
	PositionerAnchorLeft        PositionerAnchor = 3
	PositionerAnchorRight       PositionerAnchor = 4
	PositionerAnchorTopLeft     PositionerAnchor = 5
	PositionerAnchorBottomLeft  PositionerAnchor = 6
	PositionerAnchorTopRight    PositionerAnchor = 7
	PositionerAnchorBottomRight PositionerAnchor = 8
)

type PositionerGravity uint32

const (
	PositionerGravityNone        PositionerGravity = 0
	PositionerGravityTop         PositionerGravity = 1
	PositionerGravityBottom      PositionerGravity = 2
	PositionerGravityLeft        PositionerGravity = 3
	PositionerGravityRight       PositionerGravity = 4
	PositionerGravityTopLeft     PositionerGravity = 5
	PositionerGravityBottomLeft  PositionerGravity = 6
	PositionerGravityTopRight    PositionerGravity = 7
	PositionerGravityBottomRight PositionerGravity = 8
)

// The constraint adjustment value define ways the compositor will adjust
// the position of the surface, if the unadjusted position would result
// in the surface being partly constrained.
//
// Whether a surface is considered 'constrained' is left to the compositor
// to determine. For example, the surface may be partly outside the
// compositor's defined 'work area', thus necessitating the child surface's
// position be adjusted until it is entirely inside the work area.
//
// The adjustments can be combined, according to a defined precedence: 1)
// Flip, 2) Slide, 3) Resize.
type PositionerConstraintAdjustment uint32

const (
	// Don't alter the surface position even if it is constrained on some
	// axis, for example partially outside the edge of an output.
	PositionerConstraintAdjustmentNone PositionerConstraintAdjustment = 0
	// Slide the surface along the x axis until it is no longer constrained.
	//
	// First try to slide towards the direction of the gravity on the x axis
	// until either the edge in the opposite direction of the gravity is
	// unconstrained or the edge in the direction of the gravity is
	// constrained.
	//
	// Then try to slide towards the opposite direction of the gravity on the
	// x axis until either the edge in the direction of the gravity is
	// unconstrained or the edge in the opposite direction of the gravity is
	// constrained.
	PositionerConstraintAdjustmentSlideX PositionerConstraintAdjustment = 1
	// Slide the surface along the y axis until it is no longer constrained.
	//
	// First try to slide towards the direction of the gravity on the y axis
	// until either the edge in the opposite direction of the gravity is
	// unconstrained or the edge in the direction of the gravity is
	// constrained.
	//
	// Then try to slide towards the opposite direction of the gravity on the
	// y axis until either the edge in the direction of the gravity is
	// unconstrained or the edge in the opposite direction of the gravity is
	// constrained.
	PositionerConstraintAdjustmentSlideY PositionerConstraintAdjustment = 2
	// Invert the anchor and gravity on the x axis if the surface is
	// constrained on the x axis. For example, if the left edge of the
	// surface is constrained, the gravity is 'left' and the anchor is
	// 'left', change the gravity to 'right' and the anchor to 'right'.
	//
	// If the adjusted position also ends up being constrained, the resulting
	// position of the flip_x adjustment will be the one before the
	// adjustment.
	PositionerConstraintAdjustmentFlipX PositionerConstraintAdjustment = 4
	// Invert the anchor and gravity on the y axis if the surface is
	// constrained on the y axis. For example, if the bottom edge of the
	// surface is constrained, the gravity is 'bottom' and the anchor is
	// 'bottom', change the gravity to 'top' and the anchor to 'top'.
	//
	// The adjusted position is calculated given the original anchor
	// rectangle and offset, but with the new flipped anchor and gravity
	// values.
	//
	// If the adjusted position also ends up being constrained, the resulting
	// position of the flip_y adjustment will be the one before the
	// adjustment.
	PositionerConstraintAdjustmentFlipY PositionerConstraintAdjustment = 8
	// Resize the surface horizontally so that it is completely
	// unconstrained.
	PositionerConstraintAdjustmentResizeX PositionerConstraintAdjustment = 16
	// Resize the surface vertically so that it is completely unconstrained.
	PositionerConstraintAdjustmentResizeY PositionerConstraintAdjustment = 32
)

var positionerInterface = &wlproto.Interface{
	Name:    "xdg_positioner",
	Version: 3,
	Requests: []wlproto.Request{
		{
			Name:  "destroy",
			Type:  "destructor",
			Since: 1,
			Args:  []wlproto.Arg{},
		},
		{
			Name:  "set_size",
			Type:  "",
			Since: 1,
			Args: []wlproto.Arg{
				{Type: wlproto.ArgTypeInt},
				{Type: wlproto.ArgTypeInt},
			},
		},
		{
			Name:  "set_anchor_rect",
			Type:  "",
			Since: 1,
			Args: []wlproto.Arg{
				{Type: wlproto.ArgTypeInt},
				{Type: wlproto.ArgTypeInt},
				{Type: wlproto.ArgTypeInt},
				{Type: wlproto.ArgTypeInt},
			},
		},
		{
			Name:  "set_anchor",
			Type:  "",
			Since: 1,
			Args: []wlproto.Arg{
				{Type: wlproto.ArgTypeUint, Aux: reflect.TypeOf(PositionerAnchor(0))},
			},
		},
		{
			Name:  "set_gravity",
			Type:  "",
			Since: 1,
			Args: []wlproto.Arg{
				{Type: wlproto.ArgTypeUint, Aux: reflect.TypeOf(PositionerGravity(0))},
			},
		},
		{
			Name:  "set_constraint_adjustment",
			Type:  "",
			Since: 1,
			Args: []wlproto.Arg{
				{Type: wlproto.ArgTypeUint},
			},
		},
		{
			Name:  "set_offset",
			Type:  "",
			Since: 1,
			Args: []wlproto.Arg{
				{Type: wlproto.ArgTypeInt},
				{Type: wlproto.ArgTypeInt},
			},
		},
		{
			Name:  "set_reactive",
			Type:  "",
			Since: 3,
			Args:  []wlproto.Arg{},
		},
		{
			Name:  "set_parent_size",
			Type:  "",
			Since: 3,
			Args: []wlproto.Arg{
				{Type: wlproto.ArgTypeInt},
				{Type: wlproto.ArgTypeInt},
			},
		},
		{
			Name:  "set_parent_configure",
			Type:  "",
			Since: 3,
			Args: []wlproto.Arg{
				{Type: wlproto.ArgTypeUint},
			},
		},
	},
	Events: []wlproto.Event{},
}

// The xdg_positioner provides a collection of rules for the placement of a
// child surface relative to a parent surface. Rules can be defined to ensure
// the child surface remains within the visible area's borders, and to
// specify how the child surface changes its position, such as sliding along
// an axis, or flipping around a rectangle. These positioner-created rules are
// constrained by the requirement that a child surface must intersect with or
// be at least partially adjacent to its parent surface.
//
// See the various requests for details about possible rules.
//
// At the time of the request, the compositor makes a copy of the rules
// specified by the xdg_positioner. Thus, after the request is complete the
// xdg_positioner object can be destroyed or reused; further changes to the
// object will have no effect on previous usages.
//
// For an xdg_positioner object to be considered complete, it must have a
// non-zero size set by set_size, and a non-zero anchor rectangle set by
// set_anchor_rect. Passing an incomplete xdg_positioner object when
// positioning a surface raises an error.
type Positioner struct{ wlclient.Proxy }

func (*Positioner) Interface() *wlproto.Interface { return positionerInterface }

func (obj *Positioner) WithQueue(queue *wlclient.EventQueue) *Positioner {
	wobj := &Positioner{}
	obj.Conn().NewWrapper(obj, wobj, queue)
	return wobj
}

type PositionerEvents struct {
}

func (obj *Positioner) AddListener(listeners PositionerEvents) {
	obj.Proxy.SetListeners()
}

// Notify the compositor that the xdg_positioner will no longer be used.
func (obj *Positioner) Destroy() {
	obj.Conn().SendDestructor(obj, 0)
}

// Set the size of the surface that is to be positioned with the positioner
// object. The size is in surface-local coordinates and corresponds to the
// window geometry. See xdg_surface.set_window_geometry.
//
// If a zero or negative size is set the invalid_input error is raised.
func (obj *Positioner) SetSize(width int32, height int32) {
	obj.Conn().SendRequest(obj, 1, width, height)
}

// Specify the anchor rectangle within the parent surface that the child
// surface will be placed relative to. The rectangle is relative to the
// window geometry as defined by xdg_surface.set_window_geometry of the
// parent surface.
//
// When the xdg_positioner object is used to position a child surface, the
// anchor rectangle may not extend outside the window geometry of the
// positioned child's parent surface.
//
// If a negative size is set the invalid_input error is raised.
func (obj *Positioner) SetAnchorRect(x int32, y int32, width int32, height int32) {
	obj.Conn().SendRequest(obj, 2, x, y, width, height)
}

// Defines the anchor point for the anchor rectangle. The specified anchor
// is used derive an anchor point that the child surface will be
// positioned relative to. If a corner anchor is set (e.g. 'top_left' or
// 'bottom_right'), the anchor point will be at the specified corner;
// otherwise, the derived anchor point will be centered on the specified
// edge, or in the center of the anchor rectangle if no edge is specified.
func (obj *Positioner) SetAnchor(anchor PositionerAnchor) {
	obj.Conn().SendRequest(obj, 3, anchor)
}

// Defines in what direction a surface should be positioned, relative to
// the anchor point of the parent surface. If a corner gravity is
// specified (e.g. 'bottom_right' or 'top_left'), then the child surface
// will be placed towards the specified gravity; otherwise, the child
// surface will be centered over the anchor point on any axis that had no
// gravity specified.
func (obj *Positioner) SetGravity(gravity PositionerGravity) {
	obj.Conn().SendRequest(obj, 4, gravity)
}

// Specify how the window should be positioned if the originally intended
// position caused the surface to be constrained, meaning at least
// partially outside positioning boundaries set by the compositor. The
// adjustment is set by constructing a bitmask describing the adjustment to
// be made when the surface is constrained on that axis.
//
// If no bit for one axis is set, the compositor will assume that the child
// surface should not change its position on that axis when constrained.
//
// If more than one bit for one axis is set, the order of how adjustments
// are applied is specified in the corresponding adjustment descriptions.
//
// The default adjustment is none.
func (obj *Positioner) SetConstraintAdjustment(constraintAdjustment uint32) {
	obj.Conn().SendRequest(obj, 5, constraintAdjustment)
}

// Specify the surface position offset relative to the position of the
// anchor on the anchor rectangle and the anchor on the surface. For
// example if the anchor of the anchor rectangle is at (x, y), the surface
// has the gravity bottom|right, and the offset is (ox, oy), the calculated
// surface position will be (x + ox, y + oy). The offset position of the
// surface is the one used for constraint testing. See
// set_constraint_adjustment.
//
// An example use case is placing a popup menu on top of a user interface
// element, while aligning the user interface element of the parent surface
// with some user interface element placed somewhere in the popup surface.
func (obj *Positioner) SetOffset(x int32, y int32) {
	obj.Conn().SendRequest(obj, 6, x, y)
}

// When set reactive, the surface is reconstrained if the conditions used
// for constraining changed, e.g. the parent window moved.
//
// If the conditions changed and the popup was reconstrained, an
// xdg_popup.configure event is sent with updated geometry, followed by an
// xdg_surface.configure event.
func (obj *Positioner) SetReactive() {
	obj.Conn().SendRequest(obj, 7)
}

// Set the parent window geometry the compositor should use when
// positioning the popup. The compositor may use this information to
// determine the future state the popup should be constrained using. If
// this doesn't match the dimension of the parent the popup is eventually
// positioned against, the behavior is undefined.
//
// The arguments are given in the surface-local coordinate space.
func (obj *Positioner) SetParentSize(parentWidth int32, parentHeight int32) {
	obj.Conn().SendRequest(obj, 8, parentWidth, parentHeight)
}

// Set the serial of a xdg_surface.configure event this positioner will be
// used in response to. The compositor may use this information together
// with set_parent_size to determine what future state the popup should be
// constrained using.
func (obj *Positioner) SetParentConfigure(serial uint32) {
	obj.Conn().SendRequest(obj, 9, serial)
}

type SurfaceError uint32

const (
	SurfaceErrorNotConstructed     SurfaceError = 1
	SurfaceErrorAlreadyConstructed SurfaceError = 2
	SurfaceErrorUnconfiguredBuffer SurfaceError = 3
)

var surfaceInterface = &wlproto.Interface{
	Name:    "xdg_surface",
	Version: 3,
	Requests: []wlproto.Request{
		{
			Name:  "destroy",
			Type:  "destructor",
			Since: 1,
			Args:  []wlproto.Arg{},
		},
		{
			Name:  "get_toplevel",
			Type:  "",
			Since: 1,
			Args: []wlproto.Arg{
				{Type: wlproto.ArgTypeNewID, Aux: reflect.TypeOf((*Toplevel)(nil))},
			},
		},
		{
			Name:  "get_popup",
			Type:  "",
			Since: 1,
			Args: []wlproto.Arg{
				{Type: wlproto.ArgTypeNewID, Aux: reflect.TypeOf((*Popup)(nil))},
				{Type: wlproto.ArgTypeObject, Aux: reflect.TypeOf((*Surface)(nil))},
				{Type: wlproto.ArgTypeObject, Aux: reflect.TypeOf((*Positioner)(nil))},
			},
		},
		{
			Name:  "set_window_geometry",
			Type:  "",
			Since: 1,
			Args: []wlproto.Arg{
				{Type: wlproto.ArgTypeInt},
				{Type: wlproto.ArgTypeInt},
				{Type: wlproto.ArgTypeInt},
				{Type: wlproto.ArgTypeInt},
			},
		},
		{
			Name:  "ack_configure",
			Type:  "",
			Since: 1,
			Args: []wlproto.Arg{
				{Type: wlproto.ArgTypeUint},
			},
		},
	},
	Events: []wlproto.Event{
		{
			Name:  "configure",
			Since: 1,
			Args: []wlproto.Arg{
				{Type: wlproto.ArgTypeUint},
			},
		},
	},
}

// An interface that may be implemented by a wl_surface, for
// implementations that provide a desktop-style user interface.
//
// It provides a base set of functionality required to construct user
// interface elements requiring management by the compositor, such as
// toplevel windows, menus, etc. The types of functionality are split into
// xdg_surface roles.
//
// Creating an xdg_surface does not set the role for a wl_surface. In order
// to map an xdg_surface, the client must create a role-specific object
// using, e.g., get_toplevel, get_popup. The wl_surface for any given
// xdg_surface can have at most one role, and may not be assigned any role
// not based on xdg_surface.
//
// A role must be assigned before any other requests are made to the
// xdg_surface object.
//
// The client must call wl_surface.commit on the corresponding wl_surface
// for the xdg_surface state to take effect.
//
// Creating an xdg_surface from a wl_surface which has a buffer attached or
// committed is a client error, and any attempts by a client to attach or
// manipulate a buffer prior to the first xdg_surface.configure call must
// also be treated as errors.
//
// Mapping an xdg_surface-based role surface is defined as making it
// possible for the surface to be shown by the compositor. Note that
// a mapped surface is not guaranteed to be visible once it is mapped.
//
// For an xdg_surface to be mapped by the compositor, the following
// conditions must be met:
// (1) the client has assigned an xdg_surface-based role to the surface
// (2) the client has set and committed the xdg_surface state and the
// role-dependent state to the surface
// (3) the client has committed a buffer to the surface
//
// A newly-unmapped surface is considered to have met condition (1) out
// of the 3 required conditions for mapping a surface if its role surface
// has not been destroyed.
type Surface struct{ wlclient.Proxy }

func (*Surface) Interface() *wlproto.Interface { return surfaceInterface }

func (obj *Surface) WithQueue(queue *wlclient.EventQueue) *Surface {
	wobj := &Surface{}
	obj.Conn().NewWrapper(obj, wobj, queue)
	return wobj
}

type SurfaceEvents struct {
	Configure func(obj *Surface, serial uint32)
}

func (obj *Surface) AddListener(listeners SurfaceEvents) {
	obj.Proxy.SetListeners(listeners.Configure)
}

// Destroy the xdg_surface object. An xdg_surface must only be destroyed
// after its role object has been destroyed.
func (obj *Surface) Destroy() {
	obj.Conn().SendDestructor(obj, 0)
}

// This creates an xdg_toplevel object for the given xdg_surface and gives
// the associated wl_surface the xdg_toplevel role.
//
// See the documentation of xdg_toplevel for more details about what an
// xdg_toplevel is and how it is used.
func (obj *Surface) GetToplevel() *Toplevel {
	_ret := &Toplevel{}
	obj.Conn().NewProxy(0, _ret, obj.Queue())
	obj.Conn().SendRequest(obj, 1, _ret)
	return _ret
}

// This creates an xdg_popup object for the given xdg_surface and gives
// the associated wl_surface the xdg_popup role.
//
// If null is passed as a parent, a parent surface must be specified using
// some other protocol, before committing the initial state.
//
// See the documentation of xdg_popup for more details about what an
// xdg_popup is and how it is used.
func (obj *Surface) GetPopup(parent *Surface, positioner *Positioner) *Popup {
	_ret := &Popup{}
	obj.Conn().NewProxy(0, _ret, obj.Queue())
	obj.Conn().SendRequest(obj, 2, _ret, parent, positioner)
	return _ret
}

// The window geometry of a surface is its "visible bounds" from the
// user's perspective. Client-side decorations often have invisible
// portions like drop-shadows which should be ignored for the
// purposes of aligning, placing and constraining windows.
//
// The window geometry is double buffered, and will be applied at the
// time wl_surface.commit of the corresponding wl_surface is called.
//
// When maintaining a position, the compositor should treat the (x, y)
// coordinate of the window geometry as the top left corner of the window.
// A client changing the (x, y) window geometry coordinate should in
// general not alter the position of the window.
//
// Once the window geometry of the surface is set, it is not possible to
// unset it, and it will remain the same until set_window_geometry is
// called again, even if a new subsurface or buffer is attached.
//
// If never set, the value is the full bounds of the surface,
// including any subsurfaces. This updates dynamically on every
// commit. This unset is meant for extremely simple clients.
//
// The arguments are given in the surface-local coordinate space of
// the wl_surface associated with this xdg_surface.
//
// The width and height must be greater than zero. Setting an invalid size
// will raise an error. When applied, the effective window geometry will be
// the set window geometry clamped to the bounding rectangle of the
// combined geometry of the surface of the xdg_surface and the associated
// subsurfaces.
func (obj *Surface) SetWindowGeometry(x int32, y int32, width int32, height int32) {
	obj.Conn().SendRequest(obj, 3, x, y, width, height)
}

// When a configure event is received, if a client commits the
// surface in response to the configure event, then the client
// must make an ack_configure request sometime before the commit
// request, passing along the serial of the configure event.
//
// For instance, for toplevel surfaces the compositor might use this
// information to move a surface to the top left only when the client has
// drawn itself for the maximized or fullscreen state.
//
// If the client receives multiple configure events before it
// can respond to one, it only has to ack the last configure event.
//
// A client is not required to commit immediately after sending
// an ack_configure request - it may even ack_configure several times
// before its next surface commit.
//
// A client may send multiple ack_configure requests before committing, but
// only the last request sent before a commit indicates which configure
// event the client really is responding to.
func (obj *Surface) AckConfigure(serial uint32) {
	obj.Conn().SendRequest(obj, 4, serial)
}

// These values are used to indicate which edge of a surface
// is being dragged in a resize operation.
type ToplevelResizeEdge uint32

const (
	ToplevelResizeEdgeNone        ToplevelResizeEdge = 0
	ToplevelResizeEdgeTop         ToplevelResizeEdge = 1
	ToplevelResizeEdgeBottom      ToplevelResizeEdge = 2
	ToplevelResizeEdgeLeft        ToplevelResizeEdge = 4
	ToplevelResizeEdgeTopLeft     ToplevelResizeEdge = 5
	ToplevelResizeEdgeBottomLeft  ToplevelResizeEdge = 6
	ToplevelResizeEdgeRight       ToplevelResizeEdge = 8
	ToplevelResizeEdgeTopRight    ToplevelResizeEdge = 9
	ToplevelResizeEdgeBottomRight ToplevelResizeEdge = 10
)

// The different state values used on the surface. This is designed for
// state values like maximized, fullscreen. It is paired with the
// configure event to ensure that both the client and the compositor
// setting the state can be synchronized.
//
// States set in this way are double-buffered. They will get applied on
// the next commit.
type ToplevelState uint32

const (
	// The surface is maximized. The window geometry specified in the configure
	// event must be obeyed by the client.
	//
	// The client should draw without shadow or other
	// decoration outside of the window geometry.
	ToplevelStateMaximized ToplevelState = 1
	// The surface is fullscreen. The window geometry specified in the
	// configure event is a maximum; the client cannot resize beyond it. For
	// a surface to cover the whole fullscreened area, the geometry
	// dimensions must be obeyed by the client. For more details, see
	// xdg_toplevel.set_fullscreen.
	ToplevelStateFullscreen ToplevelState = 2
	// The surface is being resized. The window geometry specified in the
	// configure event is a maximum; the client cannot resize beyond it.
	// Clients that have aspect ratio or cell sizing configuration can use
	// a smaller size, however.
	ToplevelStateResizing ToplevelState = 3
	// Client window decorations should be painted as if the window is
	// active. Do not assume this means that the window actually has
	// keyboard or pointer focus.
	ToplevelStateActivated ToplevelState = 4
	// The window is currently in a tiled layout and the left edge is
	// considered to be adjacent to another part of the tiling grid.
	ToplevelStateTiledLeft ToplevelState = 5
	// The window is currently in a tiled layout and the right edge is
	// considered to be adjacent to another part of the tiling grid.
	ToplevelStateTiledRight ToplevelState = 6
	// The window is currently in a tiled layout and the top edge is
	// considered to be adjacent to another part of the tiling grid.
	ToplevelStateTiledTop ToplevelState = 7
	// The window is currently in a tiled layout and the bottom edge is
	// considered to be adjacent to another part of the tiling grid.
	ToplevelStateTiledBottom ToplevelState = 8
)

var toplevelInterface = &wlproto.Interface{
	Name:    "xdg_toplevel",
	Version: 3,
	Requests: []wlproto.Request{
		{
			Name:  "destroy",
			Type:  "destructor",
			Since: 1,
			Args:  []wlproto.Arg{},
		},
		{
			Name:  "set_parent",
			Type:  "",
			Since: 1,
			Args: []wlproto.Arg{
				{Type: wlproto.ArgTypeObject, Aux: reflect.TypeOf((*Toplevel)(nil))},
			},
		},
		{
			Name:  "set_title",
			Type:  "",
			Since: 1,
			Args: []wlproto.Arg{
				{Type: wlproto.ArgTypeString},
			},
		},
		{
			Name:  "set_app_id",
			Type:  "",
			Since: 1,
			Args: []wlproto.Arg{
				{Type: wlproto.ArgTypeString},
			},
		},
		{
			Name:  "show_window_menu",
			Type:  "",
			Since: 1,
			Args: []wlproto.Arg{
				{Type: wlproto.ArgTypeObject, Aux: reflect.TypeOf((*wayland.Seat)(nil))},
				{Type: wlproto.ArgTypeUint},
				{Type: wlproto.ArgTypeInt},
				{Type: wlproto.ArgTypeInt},
			},
		},
		{
			Name:  "move",
			Type:  "",
			Since: 1,
			Args: []wlproto.Arg{
				{Type: wlproto.ArgTypeObject, Aux: reflect.TypeOf((*wayland.Seat)(nil))},
				{Type: wlproto.ArgTypeUint},
			},
		},
		{
			Name:  "resize",
			Type:  "",
			Since: 1,
			Args: []wlproto.Arg{
				{Type: wlproto.ArgTypeObject, Aux: reflect.TypeOf((*wayland.Seat)(nil))},
				{Type: wlproto.ArgTypeUint},
				{Type: wlproto.ArgTypeUint, Aux: reflect.TypeOf(ToplevelResizeEdge(0))},
			},
		},
		{
			Name:  "set_max_size",
			Type:  "",
			Since: 1,
			Args: []wlproto.Arg{
				{Type: wlproto.ArgTypeInt},
				{Type: wlproto.ArgTypeInt},
			},
		},
		{
			Name:  "set_min_size",
			Type:  "",
			Since: 1,
			Args: []wlproto.Arg{
				{Type: wlproto.ArgTypeInt},
				{Type: wlproto.ArgTypeInt},
			},
		},
		{
			Name:  "set_maximized",
			Type:  "",
			Since: 1,
			Args:  []wlproto.Arg{},
		},
		{
			Name:  "unset_maximized",
			Type:  "",
			Since: 1,
			Args:  []wlproto.Arg{},
		},
		{
			Name:  "set_fullscreen",
			Type:  "",
			Since: 1,
			Args: []wlproto.Arg{
				{Type: wlproto.ArgTypeObject, Aux: reflect.TypeOf((*wayland.Output)(nil))},
			},
		},
		{
			Name:  "unset_fullscreen",
			Type:  "",
			Since: 1,
			Args:  []wlproto.Arg{},
		},
		{
			Name:  "set_minimized",
			Type:  "",
			Since: 1,
			Args:  []wlproto.Arg{},
		},
	},
	Events: []wlproto.Event{
		{
			Name:  "configure",
			Since: 1,
			Args: []wlproto.Arg{
				{Type: wlproto.ArgTypeInt},
				{Type: wlproto.ArgTypeInt},
				{Type: wlproto.ArgTypeArray},
			},
		},
		{
			Name:  "close",
			Since: 1,
			Args:  []wlproto.Arg{},
		},
	},
}

// This interface defines an xdg_surface role which allows a surface to,
// among other things, set window-like properties such as maximize,
// fullscreen, and minimize, set application-specific metadata like title and
// id, and well as trigger user interactive operations such as interactive
// resize and move.
//
// Unmapping an xdg_toplevel means that the surface cannot be shown
// by the compositor until it is explicitly mapped again.
// All active operations (e.g., move, resize) are canceled and all
// attributes (e.g. title, state, stacking, ...) are discarded for
// an xdg_toplevel surface when it is unmapped.
//
// Attaching a null buffer to a toplevel unmaps the surface.
type Toplevel struct{ wlclient.Proxy }

func (*Toplevel) Interface() *wlproto.Interface { return toplevelInterface }

func (obj *Toplevel) WithQueue(queue *wlclient.EventQueue) *Toplevel {
	wobj := &Toplevel{}
	obj.Conn().NewWrapper(obj, wobj, queue)
	return wobj
}

type ToplevelEvents struct {
	Configure func(obj *Toplevel, width int32, height int32, states []byte)
	Close     func(obj *Toplevel)
}

func (obj *Toplevel) AddListener(listeners ToplevelEvents) {
	obj.Proxy.SetListeners(listeners.Configure, listeners.Close)
}

// This request destroys the role surface and unmaps the surface;
// see "Unmapping" behavior in interface section for details.
func (obj *Toplevel) Destroy() {
	obj.Conn().SendDestructor(obj, 0)
}

// Set the "parent" of this surface. This surface should be stacked
// above the parent surface and all other ancestor surfaces.
//
// Parent windows should be set on dialogs, toolboxes, or other
// "auxiliary" surfaces, so that the parent is raised when the dialog
// is raised.
//
// Setting a null parent for a child window removes any parent-child
// relationship for the child. Setting a null parent for a window which
// currently has no parent is a no-op.
//
// If the parent is unmapped then its children are managed as
// though the parent of the now-unmapped parent has become the
// parent of this surface. If no parent exists for the now-unmapped
// parent then the children are managed as though they have no
// parent surface.
func (obj *Toplevel) SetParent(parent *Toplevel) {
	obj.Conn().SendRequest(obj, 1, parent)
}

// Set a short title for the surface.
//
// This string may be used to identify the surface in a task bar,
// window list, or other user interface elements provided by the
// compositor.
//
// The string must be encoded in UTF-8.
func (obj *Toplevel) SetTitle(title string) {
	obj.Conn().SendRequest(obj, 2, title)
}

// Set an application identifier for the surface.
//
// The app ID identifies the general class of applications to which
// the surface belongs. The compositor can use this to group multiple
// surfaces together, or to determine how to launch a new application.
//
// For D-Bus activatable applications, the app ID is used as the D-Bus
// service name.
//
// The compositor shell will try to group application surfaces together
// by their app ID. As a best practice, it is suggested to select app
// ID's that match the basename of the application's .desktop file.
// For example, "org.freedesktop.FooViewer" where the .desktop file is
// "org.freedesktop.FooViewer.desktop".
//
// Like other properties, a set_app_id request can be sent after the
// xdg_toplevel has been mapped to update the property.
//
// See the desktop-entry specification [0] for more details on
// application identifiers and how they relate to well-known D-Bus
// names and .desktop files.
//
// [0] http://standards.freedesktop.org/desktop-entry-spec/
func (obj *Toplevel) SetAppID(appId string) {
	obj.Conn().SendRequest(obj, 3, appId)
}

// Clients implementing client-side decorations might want to show
// a context menu when right-clicking on the decorations, giving the
// user a menu that they can use to maximize or minimize the window.
//
// This request asks the compositor to pop up such a window menu at
// the given position, relative to the local surface coordinates of
// the parent surface. There are no guarantees as to what menu items
// the window menu contains.
//
// This request must be used in response to some sort of user action
// like a button press, key press, or touch down event.
func (obj *Toplevel) ShowWindowMenu(seat *wayland.Seat, serial uint32, x int32, y int32) {
	obj.Conn().SendRequest(obj, 4, seat, serial, x, y)
}

// Start an interactive, user-driven move of the surface.
//
// This request must be used in response to some sort of user action
// like a button press, key press, or touch down event. The passed
// serial is used to determine the type of interactive move (touch,
// pointer, etc).
//
// The server may ignore move requests depending on the state of
// the surface (e.g. fullscreen or maximized), or if the passed serial
// is no longer valid.
//
// If triggered, the surface will lose the focus of the device
// (wl_pointer, wl_touch, etc) used for the move. It is up to the
// compositor to visually indicate that the move is taking place, such as
// updating a pointer cursor, during the move. There is no guarantee
// that the device focus will return when the move is completed.
func (obj *Toplevel) Move(seat *wayland.Seat, serial uint32) {
	obj.Conn().SendRequest(obj, 5, seat, serial)
}

// Start a user-driven, interactive resize of the surface.
//
// This request must be used in response to some sort of user action
// like a button press, key press, or touch down event. The passed
// serial is used to determine the type of interactive resize (touch,
// pointer, etc).
//
// The server may ignore resize requests depending on the state of
// the surface (e.g. fullscreen or maximized).
//
// If triggered, the client will receive configure events with the
// "resize" state enum value and the expected sizes. See the "resize"
// enum value for more details about what is required. The client
// must also acknowledge configure events using "ack_configure". After
// the resize is completed, the client will receive another "configure"
// event without the resize state.
//
// If triggered, the surface also will lose the focus of the device
// (wl_pointer, wl_touch, etc) used for the resize. It is up to the
// compositor to visually indicate that the resize is taking place,
// such as updating a pointer cursor, during the resize. There is no
// guarantee that the device focus will return when the resize is
// completed.
//
// The edges parameter specifies how the surface should be resized,
// and is one of the values of the resize_edge enum. The compositor
// may use this information to update the surface position for
// example when dragging the top left corner. The compositor may also
// use this information to adapt its behavior, e.g. choose an
// appropriate cursor image.
func (obj *Toplevel) Resize(seat *wayland.Seat, serial uint32, edges ToplevelResizeEdge) {
	obj.Conn().SendRequest(obj, 6, seat, serial, edges)
}

// Set a maximum size for the window.
//
// The client can specify a maximum size so that the compositor does
// not try to configure the window beyond this size.
//
// The width and height arguments are in window geometry coordinates.
// See xdg_surface.set_window_geometry.
//
// Values set in this way are double-buffered. They will get applied
// on the next commit.
//
// The compositor can use this information to allow or disallow
// different states like maximize or fullscreen and draw accurate
// animations.
//
// Similarly, a tiling window manager may use this information to
// place and resize client windows in a more effective way.
//
// The client should not rely on the compositor to obey the maximum
// size. The compositor may decide to ignore the values set by the
// client and request a larger size.
//
// If never set, or a value of zero in the request, means that the
// client has no expected maximum size in the given dimension.
// As a result, a client wishing to reset the maximum size
// to an unspecified state can use zero for width and height in the
// request.
//
// Requesting a maximum size to be smaller than the minimum size of
// a surface is illegal and will result in a protocol error.
//
// The width and height must be greater than or equal to zero. Using
// strictly negative values for width and height will result in a
// protocol error.
func (obj *Toplevel) SetMaxSize(width int32, height int32) {
	obj.Conn().SendRequest(obj, 7, width, height)
}

// Set a minimum size for the window.
//
// The client can specify a minimum size so that the compositor does
// not try to configure the window below this size.
//
// The width and height arguments are in window geometry coordinates.
// See xdg_surface.set_window_geometry.
//
// Values set in this way are double-buffered. They will get applied
// on the next commit.
//
// The compositor can use this information to allow or disallow
// different states like maximize or fullscreen and draw accurate
// animations.
//
// Similarly, a tiling window manager may use this information to
// place and resize client windows in a more effective way.
//
// The client should not rely on the compositor to obey the minimum
// size. The compositor may decide to ignore the values set by the
// client and request a smaller size.
//
// If never set, or a value of zero in the request, means that the
// client has no expected minimum size in the given dimension.
// As a result, a client wishing to reset the minimum size
// to an unspecified state can use zero for width and height in the
// request.
//
// Requesting a minimum size to be larger than the maximum size of
// a surface is illegal and will result in a protocol error.
//
// The width and height must be greater than or equal to zero. Using
// strictly negative values for width and height will result in a
// protocol error.
func (obj *Toplevel) SetMinSize(width int32, height int32) {
	obj.Conn().SendRequest(obj, 8, width, height)
}

// Maximize the surface.
//
// After requesting that the surface should be maximized, the compositor
// will respond by emitting a configure event. Whether this configure
// actually sets the window maximized is subject to compositor policies.
// The client must then update its content, drawing in the configured
// state. The client must also acknowledge the configure when committing
// the new content (see ack_configure).
//
// It is up to the compositor to decide how and where to maximize the
// surface, for example which output and what region of the screen should
// be used.
//
// If the surface was already maximized, the compositor will still emit
// a configure event with the "maximized" state.
//
// If the surface is in a fullscreen state, this request has no direct
// effect. It may alter the state the surface is returned to when
// unmaximized unless overridden by the compositor.
func (obj *Toplevel) SetMaximized() {
	obj.Conn().SendRequest(obj, 9)
}

// Unmaximize the surface.
//
// After requesting that the surface should be unmaximized, the compositor
// will respond by emitting a configure event. Whether this actually
// un-maximizes the window is subject to compositor policies.
// If available and applicable, the compositor will include the window
// geometry dimensions the window had prior to being maximized in the
// configure event. The client must then update its content, drawing it in
// the configured state. The client must also acknowledge the configure
// when committing the new content (see ack_configure).
//
// It is up to the compositor to position the surface after it was
// unmaximized; usually the position the surface had before maximizing, if
// applicable.
//
// If the surface was already not maximized, the compositor will still
// emit a configure event without the "maximized" state.
//
// If the surface is in a fullscreen state, this request has no direct
// effect. It may alter the state the surface is returned to when
// unmaximized unless overridden by the compositor.
func (obj *Toplevel) UnsetMaximized() {
	obj.Conn().SendRequest(obj, 10)
}

// Make the surface fullscreen.
//
// After requesting that the surface should be fullscreened, the
// compositor will respond by emitting a configure event. Whether the
// client is actually put into a fullscreen state is subject to compositor
// policies. The client must also acknowledge the configure when
// committing the new content (see ack_configure).
//
// The output passed by the request indicates the client's preference as
// to which display it should be set fullscreen on. If this value is NULL,
// it's up to the compositor to choose which display will be used to map
// this surface.
//
// If the surface doesn't cover the whole output, the compositor will
// position the surface in the center of the output and compensate with
// with border fill covering the rest of the output. The content of the
// border fill is undefined, but should be assumed to be in some way that
// attempts to blend into the surrounding area (e.g. solid black).
//
// If the fullscreened surface is not opaque, the compositor must make
// sure that other screen content not part of the same surface tree (made
// up of subsurfaces, popups or similarly coupled surfaces) are not
// visible below the fullscreened surface.
func (obj *Toplevel) SetFullscreen(output *wayland.Output) {
	obj.Conn().SendRequest(obj, 11, output)
}

// Make the surface no longer fullscreen.
//
// After requesting that the surface should be unfullscreened, the
// compositor will respond by emitting a configure event.
// Whether this actually removes the fullscreen state of the client is
// subject to compositor policies.
//
// Making a surface unfullscreen sets states for the surface based on the following:
// * the state(s) it may have had before becoming fullscreen
// * any state(s) decided by the compositor
// * any state(s) requested by the client while the surface was fullscreen
//
// The compositor may include the previous window geometry dimensions in
// the configure event, if applicable.
//
// The client must also acknowledge the configure when committing the new
// content (see ack_configure).
func (obj *Toplevel) UnsetFullscreen() {
	obj.Conn().SendRequest(obj, 12)
}

// Request that the compositor minimize your surface. There is no
// way to know if the surface is currently minimized, nor is there
// any way to unset minimization on this surface.
//
// If you are looking to throttle redrawing when minimized, please
// instead use the wl_surface.frame event for this, as this will
// also work with live previews on windows in Alt-Tab, Expose or
// similar compositor features.
func (obj *Toplevel) SetMinimized() {
	obj.Conn().SendRequest(obj, 13)
}

type PopupError uint32

const (
	// tried to grab after being mapped
	PopupErrorInvalidGrab PopupError = 0
)

var popupInterface = &wlproto.Interface{
	Name:    "xdg_popup",
	Version: 3,
	Requests: []wlproto.Request{
		{
			Name:  "destroy",
			Type:  "destructor",
			Since: 1,
			Args:  []wlproto.Arg{},
		},
		{
			Name:  "grab",
			Type:  "",
			Since: 1,
			Args: []wlproto.Arg{
				{Type: wlproto.ArgTypeObject, Aux: reflect.TypeOf((*wayland.Seat)(nil))},
				{Type: wlproto.ArgTypeUint},
			},
		},
		{
			Name:  "reposition",
			Type:  "",
			Since: 3,
			Args: []wlproto.Arg{
				{Type: wlproto.ArgTypeObject, Aux: reflect.TypeOf((*Positioner)(nil))},
				{Type: wlproto.ArgTypeUint},
			},
		},
	},
	Events: []wlproto.Event{
		{
			Name:  "configure",
			Since: 1,
			Args: []wlproto.Arg{
				{Type: wlproto.ArgTypeInt},
				{Type: wlproto.ArgTypeInt},
				{Type: wlproto.ArgTypeInt},
				{Type: wlproto.ArgTypeInt},
			},
		},
		{
			Name:  "popup_done",
			Since: 1,
			Args:  []wlproto.Arg{},
		},
		{
			Name:  "repositioned",
			Since: 3,
			Args: []wlproto.Arg{
				{Type: wlproto.ArgTypeUint},
			},
		},
	},
}

// A popup surface is a short-lived, temporary surface. It can be used to
// implement for example menus, popovers, tooltips and other similar user
// interface concepts.
//
// A popup can be made to take an explicit grab. See xdg_popup.grab for
// details.
//
// When the popup is dismissed, a popup_done event will be sent out, and at
// the same time the surface will be unmapped. See the xdg_popup.popup_done
// event for details.
//
// Explicitly destroying the xdg_popup object will also dismiss the popup and
// unmap the surface. Clients that want to dismiss the popup when another
// surface of their own is clicked should dismiss the popup using the destroy
// request.
//
// A newly created xdg_popup will be stacked on top of all previously created
// xdg_popup surfaces associated with the same xdg_toplevel.
//
// The parent of an xdg_popup must be mapped (see the xdg_surface
// description) before the xdg_popup itself.
//
// The client must call wl_surface.commit on the corresponding wl_surface
// for the xdg_popup state to take effect.
type Popup struct{ wlclient.Proxy }

func (*Popup) Interface() *wlproto.Interface { return popupInterface }

func (obj *Popup) WithQueue(queue *wlclient.EventQueue) *Popup {
	wobj := &Popup{}
	obj.Conn().NewWrapper(obj, wobj, queue)
	return wobj
}

type PopupEvents struct {
	Configure    func(obj *Popup, x int32, y int32, width int32, height int32)
	PopupDone    func(obj *Popup)
	Repositioned func(obj *Popup, token uint32)
}

func (obj *Popup) AddListener(listeners PopupEvents) {
	obj.Proxy.SetListeners(listeners.Configure, listeners.PopupDone, listeners.Repositioned)
}

// This destroys the popup. Explicitly destroying the xdg_popup
// object will also dismiss the popup, and unmap the surface.
//
// If this xdg_popup is not the "topmost" popup, a protocol error
// will be sent.
func (obj *Popup) Destroy() {
	obj.Conn().SendDestructor(obj, 0)
}

// This request makes the created popup take an explicit grab. An explicit
// grab will be dismissed when the user dismisses the popup, or when the
// client destroys the xdg_popup. This can be done by the user clicking
// outside the surface, using the keyboard, or even locking the screen
// through closing the lid or a timeout.
//
// If the compositor denies the grab, the popup will be immediately
// dismissed.
//
// This request must be used in response to some sort of user action like a
// button press, key press, or touch down event. The serial number of the
// event should be passed as 'serial'.
//
// The parent of a grabbing popup must either be an xdg_toplevel surface or
// another xdg_popup with an explicit grab. If the parent is another
// xdg_popup it means that the popups are nested, with this popup now being
// the topmost popup.
//
// Nested popups must be destroyed in the reverse order they were created
// in, e.g. the only popup you are allowed to destroy at all times is the
// topmost one.
//
// When compositors choose to dismiss a popup, they may dismiss every
// nested grabbing popup as well. When a compositor dismisses popups, it
// will follow the same dismissing order as required from the client.
//
// The parent of a grabbing popup must either be another xdg_popup with an
// active explicit grab, or an xdg_popup or xdg_toplevel, if there are no
// explicit grabs already taken.
//
// If the topmost grabbing popup is destroyed, the grab will be returned to
// the parent of the popup, if that parent previously had an explicit grab.
//
// If the parent is a grabbing popup which has already been dismissed, this
// popup will be immediately dismissed. If the parent is a popup that did
// not take an explicit grab, an error will be raised.
//
// During a popup grab, the client owning the grab will receive pointer
// and touch events for all their surfaces as normal (similar to an
// "owner-events" grab in X11 parlance), while the top most grabbing popup
// will always have keyboard focus.
func (obj *Popup) Grab(seat *wayland.Seat, serial uint32) {
	obj.Conn().SendRequest(obj, 1, seat, serial)
}

// Reposition an already-mapped popup. The popup will be placed given the
// details in the passed xdg_positioner object, and a
// xdg_popup.repositioned followed by xdg_popup.configure and
// xdg_surface.configure will be emitted in response. Any parameters set
// by the previous positioner will be discarded.
//
// The passed token will be sent in the corresponding
// xdg_popup.repositioned event. The new popup position will not take
// effect until the corresponding configure event is acknowledged by the
// client. See xdg_popup.repositioned for details. The token itself is
// opaque, and has no other special meaning.
//
// If multiple reposition requests are sent, the compositor may skip all
// but the last one.
//
// If the popup is repositioned in response to a configure event for its
// parent, the client should send an xdg_positioner.set_parent_configure
// and possibly a xdg_positioner.set_parent_size request to allow the
// compositor to properly constrain the popup.
//
// If the popup is repositioned together with a parent that is being
// resized, but not in response to a configure event, the client should
// send a xdg_positioner.set_parent_size request.
func (obj *Popup) Reposition(positioner *Positioner, token uint32) {
	obj.Conn().SendRequest(obj, 2, positioner, token)
}
